# app/schemas.py
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

# Base schema for common card attributes
class CardBase(BaseModel):
    scryfall_id: str
    name: str
    set_code: Optional[str] = None
    collector_number: Optional[str] = None
    quantity_normal: int = 0
    quantity_foil: int = 0
    # Add other fields you expect to create/update
    # e.g., condition: Optional[str] = None
    # language: Optional[str] = None
    # purchase_price: Optional[float] = None
    # notes: Optional[str] = None

# Schema for creating a new card (inherits from CardBase)
# This is what the API will expect in the request body for POST /cards/
class CardCreate(CardBase):
    pass # No additional fields needed for creation beyond CardBase for now

# Schema for reading/returning a card (inherits from CardBase)
# This includes fields that are generated by the database (like id, date_added)
class Card(CardBase):
    id: int
    date_added: datetime
    date_updated: Optional[datetime] = None # Make optional or ensure it's always set

    class Config:
        from_attributes = True # Changed from orm_mode = True for Pydantic v2
        # This tells Pydantic to read data from SQLAlchemy model attributes
